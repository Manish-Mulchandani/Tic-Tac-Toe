{"version":3,"sources":["logo.svg","components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","Component","Game","state","xIsNext","stepNumber","difficulty","history","Array","fill","handleChange","bind","event","setState","target","console","log","steps","slice","length","winner","calculateWinner","concat","j","getPlace","turn","lines","a","b","c","win","draw","done","push","len","pos","Math","floor","random","step","status","current","moves","map","move","desc","key","jumpTo","onChange","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b6b7f95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport default function Square(props) {\n    return (\n        <button className = \"square\" onClick = {props.onClick} >\n            {props.value}\n        </button>\n    )\n}\n","import React, { Component } from 'react';\nimport Square from \"./Square\";\n\nexport default class Board extends Component {\n    \n    renderSquare(i) {\n        return <Square value = {this.props.squares[i]}\n                onClick = {()=>this.props.onClick(i)}\n        />\n    }\n\n    render() {\n        return (\n            <div>\n                <div className = \"border-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n\n                <div className = \"border-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n\n                <div className = \"border-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Board from './Board';\n\nexport default class Game extends Component {\n\n    constructor(props)  {\n        super(props);\n        this.state =  {\n            xIsNext : true,\n            stepNumber : 0,\n            difficulty : 'Easy',\n            history:[\n                { squares:Array(9).fill(null) }\n            ]\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({\n            difficulty: event.target.value,\n            stepNumber : 0,\n            history:[\n                { squares:Array(9).fill(null) }\n            ]\n        });\n    }\n\n    handleClick(i)  {\n        console.log(i);\n        let steps = this.state.stepNumber;\n        let history = this.state.history.slice(0,steps+1);\n        let current = history[history.length - 1];\n        let squares = current.squares.slice();\n        let winner = calculateWinner(squares);\n        if (winner || squares[i]) {\n            return;\n        }\n        \n        squares[i] = 'X';\n        winner = calculateWinner(squares);\n        if (winner)\n        {\n            this.setState({\n                history: history.concat({\n                    squares: squares\n                }),\n                xIsNext: !this.state.xIsNext,\n                stepNumber: history.length\n            })\n            return;\n        }\n        let j = getPlace(squares,1,this.state.difficulty);\n        /*if(steps === 0)\n            console.clear();*/\n        squares[j] = 'O';\n        this.setState({\n            history: history.concat({\n                squares: squares\n            }),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        })\n    }\n\n    jumpTo(step) {\n        this.setState ({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        })\n    }\n\n    render() {\n\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step, move) => {\n            const desc = move ? \"Go to #\" + move : \"Start new game\";\n            return (\n                <li key = {move}>\n                    <button onClick={() => {this.jumpTo(move)}} >\n                        {desc}\n                    </button>\n                </li>\n            )\n        });\n\n        let status;\n        const step = this.state.stepNumber;\n\n        if(winner) {\n            status = 'Winner is ' + winner;\n        }\n        else if (step < 5) {\n            status = 'Next Player is X';\n        }\n        else {\n            status = 'Game Drawn';\n        }\n\n        return (\n            <div className = \"game\">\n                <div className = \"difficulty\">\n                    <label>\n                        Choose the difficulty:\n                        {' '}\n                        <select value={this.state.difficulty} onChange={this.handleChange}>\n                            <option value=\"Easy\">Easy</option>\n                            <option value=\"Medium\">Medium</option>\n                            <option value=\"Hard\">Hard</option>\n                            <option value=\"Expert\">Expert</option>\n                        </select>\n                    </label>\n                </div>\n                <div className = \"game-board\">\n                    <Board onClick={(i) => { this.handleClick(i);}}\n                            squares={current.squares}\n                    />\n                </div>\n\n                <div className = \"game-info\">\n                    <div>{status}</div>\n                    <ul>{moves}</ul>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,4,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [2,4,6]\n    ];\n    for(let i = 0; i < lines.length; i++) {\n        const [a,b,c] = lines[i];\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\n            return squares[a];\n    }\n    return null;\n}\n\n\nfunction getPlace(squares, turn, difficulty) {\n\n    if (turn === 1) {\n        const lines = [\n            [0,1,2],\n            [3,4,5],\n            [6,7,8],\n            [0,4,8],\n            [0,3,6],\n            [1,4,7],\n            [2,5,8],\n            [2,4,6]\n        ];\n        for(let i = 0; i < lines.length; i++) {\n            const [a,b,c] = lines[i];\n            if(squares[a] && squares[a] === squares[b] && !squares[c] && squares[a] === 'O')\n                return c;\n            if(squares[a] && squares[a] === squares[c] && !squares[b] && squares[c] === 'O')\n                return b;\n            if(squares[b] && squares[b] === squares[c] && !squares[a] && squares[b] === 'O')\n                return a;\n        }\n\n        for(let i = 0; i < lines.length; i++) {\n            const [a,b,c] = lines[i];\n            if(squares[a] && squares[a] === squares[b] && !squares[c] && squares[a] === 'X')\n                return c;\n            if(squares[a] && squares[a] === squares[c] && !squares[b] && squares[c] === 'X')\n                return b;\n            if(squares[b] && squares[b] === squares[c] && !squares[a] && squares[b] === 'X')\n                return a;\n        }\n    }\n\n    if((turn === 2 && difficulty === 'Easy') || (turn === 4 && difficulty === 'Medium') || (turn === 6 && difficulty === 'Hard')) {\n        for (let i = 0; i < 9; i++) {\n            if (!squares[i]) {\n                squares[i] = 'X';\n                const winner = calculateWinner(squares);\n                if (winner && winner === 'X') {\n                    squares[i] = null;\n                    return null;\n                }\n                squares[i] = null;\n            }\n        }\n        return -1;\n    }\n\n    var win = [], draw = [];\n    /*if (turn === 3)\n        console.log(squares);*/\n    let done = 0;\n    for (let i = 0; i < 9; i++) {\n        if (!squares[i]) {\n            done = 1;\n            if (turn % 2 === 1) {\n                squares[i] = 'O';\n                const winner = calculateWinner(squares);\n                if (winner && winner === 'O') {\n                    win.push(i);\n                }\n                else {\n                    let j = getPlace(squares, turn + 1, difficulty);\n                    //console.log(i + ' ' + j);\n                    if (j) {\n                        if (j === -1) {\n                            draw.push(i);\n                        }\n                        else {\n                            win.push(i);\n                        }\n                    }\n                }\n            }\n            else {\n                squares[i] = 'X';\n                const winner = calculateWinner(squares);\n                if (winner && winner === 'X') {\n                    squares[i] = null;\n                    return null;\n                }\n                else {\n                    let j = getPlace(squares, turn + 1, difficulty);\n                    if (!j) {\n                        squares[i] = null;\n                        return null;\n                    }\n                    else if (j === -1) {\n                        draw.push(i);\n                    }\n                }\n            }\n            squares[i] = null;\n        }\n    }\n\n    if (done === 0) {\n        return -1;\n    }\n\n    if (win.length === 0) {\n        if (draw.length === 0)  {\n            if (turn === 3) {\n                return null;\n            }\n            for (let i = 0; i < 9; i++) {\n                if (!squares[i]) {\n                    return i;\n                }\n            }\n        }\n        else {\n            if(turn % 2 === 1) {\n                let len = draw.length;\n                let pos = Math.floor(Math.random() * len);\n                return draw[pos];\n            }\n            else {\n                return -1;\n            }\n        }\n    }\n    else {\n        let len = win.length;\n        let pos = Math.floor(Math.random() * len);\n        return win[pos];\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}